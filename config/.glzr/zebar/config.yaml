# Taran's Zebar Config :)
# Updated: 05/09/2024

# Changelog: 
# - has cool animations when you move to a workspace or press the workspace button

# Yaml is white-space sensitive (use 2 spaces to indent).

global:
  enable_devtools: true

window/bar:
  providers: ['self']
 
  # Width of the window in physical pixels.
  width: '{{ self.args.MONITOR_WIDTH }}'
 
  # Height of the window in physical pixels.
  height: '53'
 
  # X-position of the window in physical pixels.
  position_x: '{{ self.args.MONITOR_X }}'
 
  # Y-position of the window in physical pixels.
  position_y: '{{ self.args.MONITOR_Y }}'
 
  # Whether to show the window above/below all others.
  # Allowed values: 'always_on_top', 'always_on_bottom', 'normal'.
  z_order: 'normal'
 
  # Whether the window should be shown in the taskbar.
  shown_in_taskbar: false
 
  # Whether the window should have resize handles.
  resizable: false
 
  # Styles to apply globally within the window. For example, we can use
  # this to import the Nerdfonts icon font. Ref https://www.nerdfonts.com/cheat-sheet
  # for a cheatsheet of available Nerdfonts icons.
  global_styles: |
    @import "https://www.nerdfonts.com/assets/css/webfont.css";
    @import "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css";
    @import "https://cdn.jsdelivr.net/npm/@tabler/icons-webfont@latest/dist/tabler-icons.min.css";
    @import "http://asset.localhost/C%3A%2FUsers%2FTaran%2F.glzr%2Fzebar%2Fstyles%2Fglobal.css";

    @keyframes gelatine {
      from, to { transform: scale(1, 1); }
      25% { transform: scale(0.9, 1.1); }
      50% { transform: scale(1.1, 0.9); }
      75% { transform: scale(0.95, 1.05); }
    }

    @keyframes grow {
      from { transform: scale(0); }
      to { transform: scale(1); }
    }

    @keyframes bounce-in-right {
      0% {
        opacity: 0;
        transform: translateX(2000px);
      }
      60% {
        opacity: 1;
        transform: translateX(-30px);
      }
      80% { transform: translateX(10px); }
      100% { transform: translateX(0); }
    }
 
  # CSS styles to apply to the root element within the window. Using CSS
  # nesting, we can also target nested elements (e.g. below we set the
  # color and margin-right of icons).
  styles: |
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    align-items: center;
    height: 100%;
    color: rgb(255 255 255 / 80%); /* font colour */
    font-family: "JetBrainsMono Nerd Font", ui-monospace, monospace;
    font-size: 13px;
    padding: 5px 8px;
    border-bottom: 1px solid rgb(255 255 255 / 5%);
    /* black->purple */
    background: linear-gradient(rgb(0 0 0 / 85%), rgb(5 2 20 / 80%));

    i {
      /* color: rgb(115 130 175 / 95%); -> unsure what this is or does*/
      margin-right: 7px;
    }


  # INFO: left:->group/left
  #       right:->group/right
  #       center:->group/center
  group/left:
    styles: |
      display: flex;
      align-items: center;
    
    template/glazewm_workspaces:
      styles: |
        display: flex;
        align-items: center;

        .workspace {
          background: rgb(255 255 255 / 10%);
          margin-right: 4px;
          padding: 5px 10px;
          color: rgb(255 255 255 / 90%);
          border-radius: 15px;
          cursor: pointer;

          &.displayed {
            background: rgb(255 255 255 / 15%);
          }

          &.focused {
            color: white;
            animation: grow 0.7s ease;
            background: rgb(75 115 255 / 50%);
            border: 2px solid rgba(50, 50, 140, 0.9);
          }
          &:hover {
            color: white;
            background: rgb(75 115 255 / 50%);
            border: 2px solid rgba(50, 50, 140, 0.9);
          }
        }

        .workspace:not(:nth-child(7)) {
          /* TODO: SPACING BETWEEN WORKSPACE BUTTONS :D */
          margin-right: 7px;
        }
      providers: ['glazewm']
      events:
        - type: 'click'
          fn_path: 'script.js#focusWorkspace'
          selector: '.workspace'
      template: |
        @for (workspace of glazewm.currentWorkspaces) {
          <button
            class="workspace {{ workspace.hasFocus ? 'focused' : '' }} {{ workspace.isDisplayed ? 'displayed' : '' }}"
            id="{{ workspace.name }}"
          >
            {{ workspace.displayName ?? workspace.name }}
          </button>
        }

  group/center:
    styles: |
      justify-self: center;
      color: white;
      font-size: 15px;

    template/clock:
      providers: ['date']
      # Available date tokens: https://moment.github.io/luxon/#/formatting?id=table-of-tokens
      template: |
        <i class="fa-solid fa-calendar"></i> 
        {{ date.toFormat(date.now, 'EEE dd/MM') }}
        &nbsp;
        <i class="fa-solid fa-clock"></i> 
        {{ date.toFormat(date.now, 'hh:mm a') }}
        &nbsp;
  
  group/right:
    styles: |
      display: flex;
      justify-content: end;
      align-items: center;

      .template {
        background: rgb(255 255 255 / 10%);
        margin: 0px 8px;
        padding: 2px 6px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-radius: 30px;
      }

    template/glazewm_other:
      providers: ["glazewm"]
      styles: |
        display: flex;

        .binding-mode, .tiling-direction {
          color: white;
        }

        .binding-mode {
          margin-right: 15px;
        }

      template: |
        @for (bindingMode of glazewm.bindingModes) {
          <div class="binding-mode">
            {{ bindingMode.displayName ?? bindingMode.name }}
          </div>
        }

        @if (glazewm.tilingDirection === 'horizontal') {
          <div class="tiling-direction nf nf-md-swap_horizontal"></div>
        } @else {
          <div class="tiling-direction nf nf-md-swap_vertical"></div>
        }

    template/network:
      providers: ["network"]
      styles: |
        color: white;
        padding: 0;
        display: flex;
        justify-content: end;
        align-items: center;

        .template {
          background: rgb(255 255 255 / 10%);
          margin: 0px 8px;
          padding: 2px 6px;
          display: flex;
          align-items: center;
          justify-content: space-between;
          border-radius: 30px;
          }

      template: |
        <!-- Show icon based on signal strength. -->
        @if (network.defaultInterface?.type === 'ethernet') {
          <i class="nf nf-md-ethernet_cable"></i>
        } @else if (network.defaultInterface?.type === 'wifi') {
          @if (network.defaultGateway?.signalStrength >= 80) {<i class="nf nf-md-wifi_strength_4"></i>}
          @else if (network.defaultGateway?.signalStrength >= 65) {<i class="nf nf-md-wifi_strength_3"></i>}
          @else if (network.defaultGateway?.signalStrength >= 40) {<i class="nf nf-md-wifi_strength_2"></i>}
          @else if (network.defaultGateway?.signalStrength >= 25) {<i class="nf nf-md-wifi_strength_1"></i>}
          @else {<i class="nf nf-md-wifi_strength_outline"></i>}
          Wifi
        } @else {
          <i class="nf nf-md-wifi_strength_off_outline"></i>
        }

    template/memory:
      providers: ["memory"]

      styles: |
        div {
          display: flex;
          align-items: center;
          color: white;
          
        }

      template: |
        <div><i class="nf nf-fae-chip"></i> {{ Math.round(memory.usage) }}%</div>

    template/cpu:
      providers: ['cpu']
      styles: |
        div {
          display: flex;
          align-items: center;
          color: white;
        }
        .high-usage {
          color: #900029;
        }
      template: |
        </div><i class="nf nf-oct-cpu"></i></div>

        <!-- Change the text color if the CPU usage is high. -->
        @if (cpu.usage > 85) {
          <span class="high-usage">{{ Math.round(cpu.usage) }}%</span>
        } @else {
          <span>{{ Math.round(cpu.usage) }}%</span>
        }

    template/battery:
      providers: ['battery']
      styles: |
        position: relative;

        .charging-icon {
          position: absolute;
          font-size: 11px;
          left: 7px;
          top: 2px;
        }
      template: |
        <!-- Show icon for whether battery is charging. -->
        @if (battery.isCharging) {<i class="nf nf-md-power_plug charging-icon"></i>}

        <!-- Show icon for how much of the battery is charged. -->
        @if (battery.chargePercent > 90) {<i class="nf nf-fa-battery_4"></i>}
        @else if (battery.chargePercent > 70) {<i class="nf nf-fa-battery_3"></i>}
        @else if (battery.chargePercent > 40) {<i class="nf nf-fa-battery_2"></i>}
        @else if (battery.chargePercent > 20) {<i class="nf nf-fa-battery_1"></i>}
        @else {<i class="nf nf-fa-battery_0"></i>}

        {{ Math.round(battery.chargePercent) }}%

    template/weather:
      providers: ['weather']
      template: |
        @switch (weather.status) {
          @case ('clear_day') {<i class="nf nf-weather-day_sunny"></i>}
          @case ('clear_night') {<i class="nf nf-weather-night_clear"></i>}
          @case ('cloudy_day') {<i class="nf nf-weather-day_cloudy"></i>}
          @case ('cloudy_night') {<i class="nf nf-weather-night_alt_cloudy"></i>}
          @case ('light_rain_day') {<i class="nf nf-weather-day_sprinkle"></i>}
          @case ('light_rain_night') {<i class="nf nf-weather-night_alt_sprinkle"></i>}
          @case ('heavy_rain_day') {<i class="nf nf-weather-day_rain"></i>}
          @case ('heavy_rain_night') {<i class="nf nf-weather-night_alt_rain"></i>}
          @case ('snow_day') {<i class="nf nf-weather-day_snow"></i>}
          @case ('snow_night') {<i class="nf nf-weather-night_alt_snow"></i>}
          @case ('thunder_day') {<i class="nf nf-weather-day_lightning"></i>}
          @case ('thunder_night') {<i class="nf nf-weather-night_alt_lightning"></i>}
        }
        {{ weather.celsiusTemp }}Â°